{
  "compilerOptions": {
    // 目标代码 （ts->js(es5/6/7)）
    "target": "esnext",
    // 目标带啊需要使用的模块化方案 （commonjs require/module.exportts/es module import/export）
    "module": "esnext",
    // 严格检查
    "strict": true,
    // 对 jsx 进行怎样的处理
    "jsx": "preserve",
    // 按照 Node 的方式去解析模块 import "/main.node"
    "moduleResolution": "node",
    // 跳过对一些类库的类型检测(type)
    "skipLibCheck": true,
    // export default/module.exports ={} 两者是否可以混合使用
    // 相当于 es module 和 commonjs 是否可以混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,

    "forceConsistentCasingInFileNames": true,
    "useDefineForClassFields": true,
    // 要不要生成映射文件 (ts-js)
    "sourceMap": true,
    // 文件路径在解析时的基本URL
    "baseUrl": ".",
    // 指定具体要解析使用的类型
    "types": ["webpack-env"],
    // 路径解析，类似于 webpack alias
    "paths": {
      "@/*": ["src/*"]
    },
    // 可以指定在项目中可以使用哪些库的类型
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },
  // 需要解析的文件
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  // 不需要解析的文件
  "exclude": ["node_modules"]
}
